---
title: "PFA_sampling"
format: html
editor: visual
params:
  output_dir:
    label: Output Directory
    value: c:/tempDir/out/
    input: text
  data_dir:
    label: Data Directory
    value: c:/tempDir/in
    input: text
  length_scale:
    label: Length Scale (m)
    value: 15.0
    input: numeric
  radius:
    label: Radius (m) for DEV
    value: 30.0
    input: numeric
  input_list:
    label: Text file containing a list of DEM .flt rasters and initiation point shapefiles.
    value: c:/tempDir/in/DEMs/input_list.txt
    input: text
  inner_buffer:
    label: Inner Buffer for Landslide Points (m)
    value: 15.0
    input: numeric
  outer_buffer:
    label: Outer Buffer for Landslide Points (m)
    value: 250.0
    input: numeric
  expansion_factor:
    label: Expansion Factor
    value: 1.0
    input: numeric
  duration_list:
    label: List of storm durations
    value: duration_list.txt
    input: text
  over_sample:
    label: Multiplier for number of nonlandslide sample points relative to landslide points
    value: 200
    input: numeric
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  error = FALSE
)
```

```{r load, include = FALSE}
library(TerrainWorksUtils)
library(terra)
library(stringr)
library(shiny)
library(dplyr)
```

Our task is to estimate susceptibility to shallow landslide initiation based on empirical association of mapped initiation-point locations with environmental attributes that we expect could affect landslide potential. We will use a relatively small set of candidate predictors focused on those attributes known from other studies to be (potentially) primary controls on landslide location.

These include

[Topographic Attributes]{.underline}:

1\. Gradient,

2\. Mean curvature (potentially associated with soil depth), and

3\. Contributing area for storms of specified duration.

[Material Properties]{.underline}:

4\. rock type, based on grouping of mapped geologic units into 5 basic groups

[Forest Cover]{.underline}:

5\. estimated stand age in 2017, and

[Forest Roads]{.underline}:

6\. Distance to a mapped road

Code to extract the topographic attributes is described in previous markdown documents, so I'll start here with the others.

Geologic mapping for Oregon is available at <https://www.oregongeology.org/pubs/dds/p-OGDC-7.htm>. This polygon feature class includes several fields in the attribute table that provide an indication of rock type. I used the ThematicRockType field, which contained 12 rock types, and grouped these into 5 classes as follows:

| Thematic Rock Type            | Class |
|:------------------------------|:-----:|
| Marine Sedimentary Rocks      |   1   |
| Melange rocks                 |   1   |
| Terrestrial sedimentary rocks |   1   |
| Marine volcanic rocks         |   2   |
| Volcanic rocks                |   2   |
| Batholith rocks               |   3   |
| Intrusive rocks               |   3   |
| Invasive extrusive rocks      |   3   |
| Metamorphic rocks             |   3   |
| Vent and pyroclastic rocks    |   4   |
| Volcaniclastic rocks          |   4   |
| Sediments                     |   5   |

These are provided as a polygon coverage that I've exported to a shapefile GeoPoly.shp.

Data on forest stand structure is available at <https://lemmadownload.forestry.oregonstate.edu/>. There are a variety of modeled metrics available. I think the most useful for looking at how forest cover might be related to landslide susceptibility are

AGE_DOM: Basal area weighted stand age based on dominant and codominant trees, and

CANCOV: Canopy cover of all live trees.

These are provided as rasters with a 30-m cell size. For extracting stand age and canopy cover values from the rasters, first project the initiation points to the same coordinate system as the rasters, rather than projecting the rasters to the coordinate system of the points. This will preserve the locational precision of the raster data. *Note: I thought canopy cover would be useful, but we need the canopy cover at the time of landslide occurrence. AGE_DOM gives estimated stand age in 2017, so we can subtract the time since landslide occurrence from AGE_DOM to get approximate stand age at the time of landsliding. I think we'll need to forego canopy cover.*

A GIS polyline feature class for forest roads was provided by ODF. I'll export this to a shapefile and provide a Fortran routine to obtain the distance to the road line for each DEM grid point. We can then extract the distance-to-road value from that raster for the landslide points using bilinear interpolation.

Use the same input file formats as the PFA_Sampling_Multiple_DEMs.Rmd markdown file.

```{r}
output_dir <- params$output_dir

if (!dir.exists(output_dir)) {
  dir.create(output_dir)
}

length_scale = params$length_scale # Default is a 15-meter length scale (7.5-meter radius) for calculating derivatives.

data_files <- read.table(params$input_list, 
                         header = TRUE,
                         sep = ",")

```

```{r}
  num_files <- nrow(data_files)
  num_points <- 0
  for (i in 1:num_files) {
    initiation_points <- terra::vect(paste0(str_trim(data_files[i,2]), ".shp"))
    num_points <- num_points + nrow(initiation_points)
  }
```

This list contains `r print(num_files)` files with `r print(num_points)` landslide initiation points.

We use multiple DEM files clipped from the larger lidar DEM coverage for Oregon. Each file contains a portion of the DEM surrounding some set of landslide initiation points. These were clipped using the "watershed" Fortran program in the Netrace suite. Each has an accompanying point shapefile with the associated landslide initiation points. The following code chunks will loop through the DEM files to build the sample-point data frames. However, I think we can load the entire data sets for geology and forest cover.

```{r}
geoPoly <- terra::vect(paste0(params$data_dir, "/geoPoly.shp"))
standAge <- terra::rast(paste0(params$data_dir, "/age_dom_2017.tif"))
```

We face some challenges with stand age. We need the spatial distribution of stand age at the time of each landslide. Let's look at the entire DOGAMI inventory.

```{r}
init_all <- terra::vect(paste0(params$data_dir, "/all_initiation_points.shp"))
n <- nrow(init_all)
names(init_all)
```

init_all\$YEAR is the year of landslide occurrence.

```{r}
table(init_all$YEAR[which(init_all$YEAR > 0)])
```

Of the `r print(n)` points contained in the DOGAMI inventory, only 431 include year of occurrence, and of these, 423 occurred in 1996. For events with no year of occurrence, the field DATE_RANGE provides 5-year windows within which the landslide occurred. This is the time period between aerial photo acquisitions.

```{r}
table(init_all$DATE_RANGE[which(init_all$YEAR == 0)])
```

There is one point prior to 1996, 33 probably associated with the 1996 storms (which we can add to the 423 with a 1996 YEAR date), 158 probably associated with the 2007 storm, and a scattering at other dates. When we sample non-landslide locations, we need to adjust the stand age from that for 2017 to reflect conditions at the time of each landslide. We've divided the inventory into smaller sets of points associated with the clipped out portions of the lidar DEMs. For each set, we'll need to find how many initiation points are associated with each time of occurrence spanned by the points in that set. We then need a proportional number of sampled non-landslide points with adjusted stand age.

Let's divide the initiation points into groups by landslide date and look at how modeled stand age is distributed amoung them. The years indicated are just to divide points into similar dates, not necessarily all in the same year.

```{r}
init_1996 <- init_all[init_all$YEAR==1996]
init_1996 <- rbind(init_1996,
                   init_all[init_all$DATE_RANGE=="1995-2000"])
init_1996 <- rbind(init_1996,
                   init_all[init_all$DATE_RANGE=="1996-1997"])

init_2007 <- init_all[init_all$YEAR==2006]
init_2007 <- rbind(init_2007,
                   init_all[init_all$YEAR==2007])
init_2007 <- rbind(init_2007,
                   init_all[init_all$DATE_RANGE=="2005-2009"])

init_2011 <- init_all[init_all$YEAR==2015]
init_2011 <- rbind(init_2011,
                   init_all[init_all$DATE_RANGE=="2009-2011"])
init_2011 <- rbind(init_2011,
                   init_all[init_all$DATE_RANGE=="2011-2014"])
```

The standAge raster is in a different projection than the DEMs. Rather than project the raster, which would shift the pixel locations relative to the landslide initiation points, we should project the points. This will maintain the correct positioning between the standAge raster and the points.

```{r}
pnts <- terra::project(init_1996,standAge)
ages <- terra::extract(standAge, 
                       pnts,
                       method = "simple")
ages$age_dom_2017 <- ages$age_dom_2017 / 10
ages$age_dom_2017 <- ages$age_dom_2017 - (2017-1996)
xmin <- min(ages$age_dom_2017)
xmax <- max(ages$age_dom_2017)
h <- hist(ages$age_dom_2017, 
          breaks = as.integer((xmax-xmin)/10), 
          xlim = c(xmin,xmax), 
          xlab = "Stand Age (yr)",
          main = "Stand ages for 1996 landslide points, 10-yr increments")
text(h$mids,h$counts, labels = h$counts, adj=c(0.5, -0.25))
```

I'm not sure what to do about the 23 sites that have an estimated stand age younger than the 21 years between 1996 and 2017; we don't know what the stand age was in 1996. We could ignore these points, but that biases the sample to landslides in younger stands.

```{r}
pnts <- terra::project(init_2007,standAge)
ages <- terra::extract(standAge, 
                       pnts,
                       method = "simple")
ages$age_dom_2017 <- ages$age_dom_2017 / 10
ages$age_dom_2017 <- ages$age_dom_2017 - (2017-2007)
xmin <- min(ages$age_dom_2017)
xmax <- max(ages$age_dom_2017)
h <- hist(ages$age_dom_2017, 
          breaks = as.integer((xmax-xmin)/10), 
          xlim = c(xmin,xmax), 
          xlab = "Stand Age (yr)",
          main = "Stand ages for 2007 landslide points, 10-yr increments")
text(h$mids,h$counts, labels = h$counts, adj=c(0.5, -0.25))
```

Again, 15 sites with unknown stand ages at the time of landslide occurrence.

```{r}
pnts <- terra::project(init_2011,standAge)
ages <- terra::extract(standAge, 
                       pnts,
                       method = "simple")
ages$age_dom_2017 <- ages$age_dom_2017 / 10
ages$age_dom_2017 <- ages$age_dom_2017 - (2017-2011)
xmin <- min(ages$age_dom_2017)
xmax <- max(ages$age_dom_2017)
h <- hist(ages$age_dom_2017, 
          breaks = as.integer((xmax-xmin)/10), 
          xlim = c(xmin,xmax), 
          xlab = "Stand Age (yr)",
          main = "Stand ages for 2011 landslide points, 10-yr increments")
text(h$mids,h$counts, labels = h$counts, adj=c(0.5, -0.2))
```

Five sites with unknown stand age at time of landsliding. For all these time points, the relationship between landslide probability and stand age will depend on the distribution of stand ages in the non-landslide sample domain. If we stick with stand age in terms of years, then I'm inclined to toss points with unknown stand age. If, however, we were to divide stands into age classes, then we could put these unknown-age cases into an "old" class.

Let's look at the distribution over rock types:

```{r}
init_geo <- terra::extract(geoPoly, init_all)
names(init_geo)
```

GeoClass is the field containing the class values listed in the table above.

```{r}
geo_class <- recode_factor(init_geo$GeoClass, '1' = "Sedimentary", '2' = "  Volcanic", '3' = "  Igneous+Metamorphic", '4' = "Volcaniclastic", '5' = "Unconsolidated")
table(geo_class)
```

We have a lot of points in sedimentary rocks, a fair number in volcanic, some in volcaniclastic, probably not enough in Igneous+Metamorphic, and certainly too few in Unconsolidated. This might be an insufficiently distributed sample to discern effects of rock type.

We are also limiting the domain of the analysis area for sampling non-landslide points to fall within the limits of gradient and curvature observed for landslide-initiation sites. We are assuming that no landslides occur outside of these limits. This limits the non-landslide area sample to locations where landslides might occur; outside of this zone, any model should indicate zero probability of landsliding. We need to loop through the list of DEM rasters and initiation-point shapefiles to find the limits of gradient and curvature associated with initiation points.

```{r}
#| echo: false

ls_pnts <- data.frame()

for (i in 1:num_files) {
  DEM <- paste0(data_files[i,1], ".flt")
  initiation_points <- terra::vect(paste0(str_trim(data_files[i,2]), ".shp"))
  
# Binary floating point rasters are created in the output_dir by function TerrainWorksUtils::elev_deriv. 
# It can take a long time to create them, so if they're already there, read them in. But make sure you
# aren't reading .flt rasters created from a different input list.
  grad_name = paste0("gradient_", as.character(i))
  prof_name = paste0("profcurv_", as.character(i))
  tan_name = paste0("tancurv_", as.character(i))
  mean_name = paste0("meancurv_", as.character(i))
  
  if (!(file.exists(paste0(output_dir, grad_name, ".flt")) & file.exists(paste0(output_dir, mean_name, ".flt")))) {
    
    rasters <- c(paste0("GRADIENT,", output_dir, grad_name),
                 paste0("SLOPE NORMAL CURVATURE,", output_dir, prof_name),
                 paste0("TANGENTIAL CURVATURE,", output_dir, tan_name),
                 paste0("MEAN CURVATURE,", output_dir, mean_name))

    TerrainWorksUtils::elev_deriv(rasters = rasters,
                                  length_scale = length_scale,
                                  dem = DEM,
                                  scratch_dir = output_dir)
  }

  derivs <- terra::rast(paste0(output_dir, grad_name, ".flt"))
  names(derivs) <- "gradient"
 
  derivs <- c(derivs, terra::rast(paste0(output_dir, tan_name, ".flt")))
  names(derivs[[2]]) <- "tancurv"
  
  derivs <- c(derivs, terra::rast(paste0(output_dir, prof_name, ".flt")))
  names(derivs[[3]]) <- "profcurv"
  
  derivs <- c(derivs, terra::rast(paste0(output_dir, mean_name, ".flt")))
  names(derivs[[4]]) <- "meancurv"
  
  # Get the gradient, tangent, and profile curvature values at each initiation site and append them to the ls_pnts dataframe
  vals <- terra::extract(derivs,
                         initiation_points,
                         method = "bilinear")
  
  ls_pnts <- rbind(ls_pnts,  vals)
  
}
```

The ls_pnts dataframe provides the upper and lower limits for gradient and mean curvature in defining the analysis region from which to sample nonlandslide points.

```{r}
grad_min <- min(ls_pnts$gradient)
grad_max <- max(ls_pnts$gradient)
tan_min <- min(ls_pnts$tancurv)
tan_max <- max(ls_pnts$tancurv)
prof_min <- min(ls_pnts$profcurv)
prof_max <- max(ls_pnts$profcurv)
mean_min <- min(ls_pnts$meancurv)
mean_max <- max(ls_pnts$meancurv)

if (!params$expansion_factor == 1) {
  range <- grad_max - grad_min
  dgrad <- (params$expansion_factor - 1.0) * (range / 2.)
  grad_min <- grad_min - dgrad
  grad_max <- grad_max + dgrad
  
  range <- tan_max - tan_min
  dtan <- (params$expansion_factor - 1.0) * (range / 2.)
  tan_min <- tan_min - dtan
  tan_max <- tan_max + dtan
  
  range <- prof_max - prof_min
  dprof <- (params$expansion_factor - 1.0) * (range / 2.)
  prof_min <- prof_min - dprof
  prof_max <- prof_max + dprof
  
  range <- mean_max - mean_min
  dmean <- (params$expansion_factor - 1.0) * (range / 2.)
  mean_min <- mean_min - dmean
  mean_max <- mean_max + dmean
  }

range_mx <- matrix(c(grad_min, tan_min, prof_min, mean_min, 
                     grad_max, tan_max, prof_max, mean_max), ncol = 2, nrow = 4)
colnames(range_mx) <- c("min", "max")
rownames(range_mx) <- c("gradient", "tancurv", "profcurv", "meancurv")
```

Here are the limits, using an expansion factor of `r print(params$expansion_factor)`:

```{r}
print(range_mx)
```

Locations for non-landslide sample points are constrained to fall within this range of gradient and mean-curvature values; we're assuming that locations with values outside this range have no landslide initiations. This is a potential bias introduced by the set of initiation points in the landslide inventory and our choice of expansion factor.

We can now define the domain for non-landslide sample points over the DEM, which includes only DEM cells with gradient and mean-curvature values within the range identified above. We exclude an area around each initiation point of radius `r print(params$inner_buffer)`, assuming that this area may be associated with initiation. We also exclude all areas beyond a distance of `r print(params$outer_buffer)`. This is because the DOGAMI inventory is not a census of landslides within a delineated study area, but rather a selection of landslide events from multiple inventories. We assume that if these other inventories had a landslide within that outer-buffer radius, it would have been included.

```{r}
#| echo: false

ls_1996 <- data.frame()
ls_2007 <- data.frame()
ls_2011 <- data.frame()
nonls_1996 <- data.frame()
nonls_2007 <- data.frame()
nonls_2011 <- data.frame()

# Get storm durations for contributing area
duration_list <- paste0(params$data_dir, "/", params$duration_list)
if (file.exists(params$duration_list)) {
  durations <- read.csv(duration_list, header = FALSE)
} else {
  durations <- c(6, 12, 24, 48)
}

all_roads <- terra::vect(paste0(params$data_dir, "/roads.shp"))
```

```{r}
# Loop through the DEM files. This is long because there is a lot to do in each iteration of the loop
for (i in 1:num_files) {
  DEM <- paste0(data_files[i,1], ".flt")
  
  grad_name <- paste0("gradient_", as.character(i))
  file_name <- paste0(output_dir, grad_name)
  covariates <- terra::rast(paste0(file_name, ".flt")) # covariates[1]
  names(covariates) <- "gradient"
  
# Get the initiation points for this DEM for each time slot (1996, 2007, 2011)
  pnts_1996 <- terra::extract(covariates,
                              init_1996,
                              bind = TRUE) # with "bind", pnts is a SpatVector
  notNA <- which(pnts_1996$gradient >= 0) # get rid of points outside of this DEM
  pnts_1996 <- pnts_1996[notNA,]
  if (nrow(pnts_1996) > 0) {
  # The stand ages are a bit more complicated. Work through the three age categories identified above.
    age <- terra::project(pnts_1996,
                          standAge)
  
    vals_1996 <- terra::extract(standAge,
                                age,
                                method = "simple")
    
    vals_1996$age <- (vals_1996$age_dom_2017/10) - (2017 - 1996) # get stand age at time of 1996 landslides
    keep <- which(vals_1996$age >= 0)
    pnts_1996 <- pnts_1996[keep,] # ignore points where stand age in 1996 is unknown
    vals_1996 <- vals_1996[keep,]
    vals_1996 <- vals_1996[, "age"]
  }
  
  pnts_2007 <- terra::extract(covariates,
                              init_2007,
                              bind = TRUE)
  notNA <- which(pnts_2007$gradient >= 0) 
  pnts_2007 <- pnts_2007[notNA,]
  if (nrow(pnts_2007) > 0) {
    age <- terra::project(pnts_2007,
                          standAge)
  
    vals_2007 <- terra::extract(standAge,
                                age,
                                method = "simple")
    
    vals_2007$age <- (vals_2007$age_dom_2017/10) - (2017 - 2007) # get stand age at time of 2007 landslides
    keep <- which(vals_2007$age >= 0)
    pnts_2007 <- pnts_2007[keep,] # ignore points where stand age in 1996 is unknown
    vals_2007 <- vals_2007[keep,]
    vals_2007 <- vals_2007[, "age"]
  } 
  
  pnts_2011 <- terra::extract(covariates,
                              init_2011,
                              bind = TRUE) 
  notNA <- which(pnts_2011$gradient >= 0) 
  pnts_2011 <- pnts_2011[notNA,]
  if (nrow(pnts_2011) > 0) {
    age <- terra::project(pnts_2011,
                          standAge)
  
    vals_2011 <- terra::extract(standAge,
                                age,
                                method = "simple")
    
    vals_2011$age <- (vals_2011$age_dom_2017/10) - (2017 - 2011) # get stand age at time of 2011 landslides
    keep <- which(vals_2011$age >= 0)
    pnts_2011 <- pnts_2011[keep,] # ignore points where stand age in 1996 is unknown
    vals_2011 <- vals_2011[keep,]
    vals_2011 <- vals_2011[, "age"]
  }

# Now get curvatures
  tan_name <- paste0("tancurv_", as.character(i))
  file_name <- paste0(output_dir, tan_name)
  covariates <- c(covariates, terra::rast(paste0(file_name, ".flt")))
  names(covariates[[2]]) <- "tancurv"

  prof_name <- paste0("profcurv_", as.character(i))
  file_name <- paste0(output_dir, prof_name)
  covariates <- c(covariates, terra::rast(paste0(file_name, ".flt")))
  names(covariates[[3]]) <- "profcurv"
  
  mean_name <- paste0("meancurv_", as.character(i))
  file_name <- paste0(output_dir, mean_name)
  covariates <- c(covariates, terra::rast(paste0(file_name, ".flt")))
  names(covariates[[4]]) <- "meancurv"
  
# Get distance-to-road values
  roads <- terra::crop(all_roads, covariates)
  
  if (nrow(roads) == 0) {
    distTo <- rast(covariates,
                   nlyr = 1)
    values(distTo) <- NA
    covariates <- c(covariates, distTo) # covariates[[5]]
  
  } else {
    
    road_shapefile <- paste0(params$output_dir, "roads_", as.character(i), ".shp")  
    writeVector(roads, road_shapefile, overwrite = TRUE)
    raster_name <- paste0("distTo_", as.character(i))
    file_name <- paste0(output_dir, raster_name)
    covariates <- c(covariates,
                    TerrainWorksUtils::distance_to_road(raster = paste0(file_name, ".flt"),
                                                        dem = DEM,
                                                        road_shapefile = road_shapefile,
                                                        radius = 1000.,
                                                        scratch_dir = output_dir))
  }
  names(covariates[[5]]) <- "dist_to_road"
  
# Get total accumulation
  file_name <- paste0(output_dir, "accum")
  accum <- TerrainWorksUtils::bldgrds_nochannels(dem = DEM,
                                                 raster = file_name,
                                                 aspect_length = params$length_scale,
                                                 plan_length = params$length_scale,
                                                 grad_length = params$length_scale,
                                                 scratch_dir = output_dir)
  mask <- terra::focalMat(accum, 
                         7.5,
                         type  = "circle",
                         fillNA = TRUE)
  
  accumMax <- terra::focal(accum,
                           w = mask,
                           fun = max)
  
  raster_name <- paste0("accumMax_", as.character(i), ".flt")
  file_name <- paste0(output_dir, raster_name)
  writeRaster(accumMax,file_name)
  
  covariates <- c(covariates, accumMax)
                  
  names(covariates[[6]]) <- "total_accum"
  
  # Get the partial contributing areas here; we don't need to save the rasters.
  # This does take awhile.
  k = 1.0 # saturated hydraulic conductivity in meters per hour

  for (j in 1:ncol(durations)) {
    d <- durations[[j]]
    raster_name <- paste0("pca_", as.character(d), "_", as.character(i))
    file_name <- paste0(output_dir, raster_name)
    covariates <- c(covariates, 
                    TerrainWorksUtils::contributing_area(raster = file_name,
                                                         dem = DEM, 
                                                         length_scale = length_scale, 
                                                         k = k, 
                                                         d = d, 
                                                         scratch_dir = output_dir))
    raster_name <- paste0("pca_", as.character(d))
    names(covariates[[6 + j]]) <- raster_name
    
  }
  
  if (nrow(pnts_1996) > 0) {
    vals <- terra::extract(covariates,
                           pnts_1996,
                           method = "bilinear")
    
    geo <- terra::extract(geoPoly,
                          pnts_1996)
    
    vals$geo <- geo[ ,"GeoClass"]
    
    vals$age <- vals_1996
    
    coords <- terra::crds(pnts_1996)
    vals$x <- coords[,1]
    vals$y <- coords[,2]
    
    ls_1996 <- rbind(ls_1996, vals)
    
  # Now sample the nonlandslide analysis zone
    neg_region <- TerrainWorksUtils::make_neg_region(positive_points = pnts_1996, 
                                                     ref_raster = DEM, 
                                                     inner_buffer = params$inner_buffer, 
                                                     outer_buffer = params$outer_buffer,
                                                     return_raster = TRUE)

  # Set values within the inner buffer and beyond the outer buffer to nodata
    analysis_mask <- TerrainWorksUtils::mask_by_range(covariates[[1:4]], range_mx)
    analysis_mask <- analysis_mask * neg_region
  
    masked <- covariates * analysis_mask
  
    num_points <- ceiling(length(pnts_1996)*params$over_sample)

    nonls_pnts <- TerrainWorksUtils::sample_points(count = num_points,
                                                   region = analysis_mask,
                                                   buffer = FALSE,
                                                   rseed = 12)
  
    vals <- terra::extract(masked,
                           nonls_pnts,
                           method = "bilinear")
  
    # Get geology and landcover
    geo <- terra::extract(geoPoly,
                          nonls_pnts)
    vals$geo <- geo[ ,"GeoClass"]
    
    age <- project(nonls_pnts,
                   standAge)
  
    age_1996 <- terra::extract(standAge,
                               age,
                               method = "simple")
    
    age_1996$age_dom_2017 <- (age_1996$age_dom_2017/10) - (2017 - 1996)
    vals$age <- age_1996[, "age_dom_2017"]
    keep <- which(vals$age >= 0)
    vals <- vals[keep, ]
    nonls_pnts <- nonls_pnts[keep, ]
    
    coords <- crds(nonls_pnts)
    vals$x <- coords[,1]
    vals$y <- coords[,2]
  
    nonls_1996 <- rbind(nonls_1996, vals)
  }
  
  if (nrow(pnts_2007) > 0) {
    vals <- terra::extract(covariates,
                           pnts_2007,
                           method = "bilinear")
    
    vals$geo <- terra::extract(geoPoly,
                               pnts_2007)
    
    vals$age <- vals_2007
    
    coords <- terra::crds(pnts_2007)
    vals$x <- coords[,1]
    vals$y <- coords[,2]
    
    ls_2007 <- rbind(ls_2007, vals)
    
  # Now sample the nonlandslide analysis zone
    neg_region <- TerrainWorksUtils::make_neg_region(positive_points = pnts_2007, 
                                                     ref_raster = DEM, 
                                                     inner_buffer = params$inner_buffer, 
                                                     outer_buffer = params$outer_buffer,
                                                     return_raster = TRUE)

  # Set values within the inner buffer and beyond the outer buffer to nodata
    analysis_mask <- TerrainWorksUtils::mask_by_range(covariates[[1:4]], range_mx)
    analysis_mask <- analysis_mask * neg_region
  
    masked <- covariates * analysis_mask
  
    num_points <- ceiling(length(pnts_2007)*params$over_sample)

    nonls_pnts <- TerrainWorksUtils::sample_points(count = num_points,
                                                   region = analysis_mask,
                                                   buffer = FALSE,
                                                   rseed = 12)
  
    vals <- terra::extract(masked,
                           nonls_pnts,
                           method = "bilinear")
  
    # Get geology and landcover
    geo <- terra::extract(geoPoly,
                          nonls_pnts)
    vals$geo <- geo[ ,"GeoClass"]
    
    age <- project(nonls_pnts,
                   standAge)
  
    age_2007 <- terra::extract(standAge,
                               age,
                               method = "simple")
    
    age_2007$age_dom_2017 <- (age_2007$age_dom_2017/10) - (2017 - 2007)
    vals$age <- age_2007[, "age_dom_2017"]
    keep <- which(vals$age >= 0)
    vals <- vals[keep, ]
    nonls_pnts <- nonls_pnts[keep, ]
    
    coords <- crds(nonls_pnts)
    vals$x <- coords[,1]
    vals$y <- coords[,2]
  
    nonls_2007 <- rbind(nonls_2007, vals)
  }
  
  if (nrow(pnts_2011) > 0) {
    vals <- terra::extract(covariates,
                           pnts_2011,
                           method = "bilinear")
    
    vals$geo <- terra::extract(geoPoly,
                               pnts_2011)
    
    vals$age <- vals_2011
    
    coords <- terra::crds(pnts_2011)
    vals$x <- coords[,1]
    vals$y <- coords[,2]
    
    ls_2011 <- rbind(ls_2011, vals)
    
  # Now sample the nonlandslide analysis zone
    neg_region <- TerrainWorksUtils::make_neg_region(positive_points = pnts_2011, 
                                                     ref_raster = DEM, 
                                                     inner_buffer = params$inner_buffer, 
                                                     outer_buffer = params$outer_buffer,
                                                     return_raster = TRUE)

  # Set values within the inner buffer and beyond the outer buffer to nodata
    analysis_mask <- TerrainWorksUtils::mask_by_range(covariates[[1:4]], range_mx)
    analysis_mask <- analysis_mask * neg_region
  
    masked <- covariates * analysis_mask
  
    num_points <- ceiling(length(pnts_2011)*params$over_sample)

    nonls_pnts <- TerrainWorksUtils::sample_points(count = num_points,
                                                   region = analysis_mask,
                                                   buffer = FALSE,
                                                   rseed = 12)
  
    vals <- terra::extract(masked,
                           nonls_pnts,
                           method = "bilinear")
  
    # Get geology and landcover
    geo <- terra::extract(geoPoly,
                          nonls_pnts)
    vals$geo <- geo[ ,"GeoClass"]
    
    age <- project(nonls_pnts,
                   standAge)
  
    age_2011 <- terra::extract(standAge,
                               age,
                               method = "simple")
    
    age_2011$age_dom_2017 <- (age_2011$age_dom_2017/10) - (2017 - 2011)
    vals$age <- age_2011[, "age_dom_2017"]
    keep <- which(vals$age >= 0)
    vals <- vals[keep, ]
    nonls_pnts <- nonls_pnts[keep, ]
    
    coords <- crds(nonls_pnts)
    vals$x <- coords[,1]
    vals$y <- coords[,2]
  
    nonls_2011 <- rbind(nonls_2011, vals)
  }
# Clean up
#  grad_name <- paste0("gradient_", as.character(i))
#  file_name <- paste0(output_dir, grad_name)
#  unlink(paste0(file_name, ".flt"))
#  unlink(paste0(file_name, ".hdr"))
#  unlink(paste0(file_name, ".prj"))
#  unlink(paste0(file_name, ".log"))
  
#  tan_name <- paste0("tancurv_", as.character(i))
#  file_name <- paste0(output_dir, tan_name)
#  unlink(paste0(file_name, ".flt")) 
#  unlink(paste0(file_name, ".hdr"))
#  unlink(paste0(file_name, ".prj"))
#  unlink(paste0(file_name, ".log"))
  
#  prof_name <- paste0("profcurv_", as.character(i))
#  file_name <- paste0(output_dir, prof_name)
#  unlink(paste0(file_name, ".flt")) 
#  unlink(paste0(file_name, ".hdr"))
#  unlink(paste0(file_name, ".prj"))
#  unlink(paste0(file_name, ".log"))
  
#  dev_name <- paste0("dev_", as.character(i))
#  file_name <- paste0(output_dir, dev_name)
#  unlink(paste0(file_name, ".flt")) 
#  unlink(paste0(file_name, ".hdr"))
#  unlink(paste0(file_name, ".prj"))
#  unlink(paste0(file_name, ".log")) 
    
#  raster_name <- paste0("distTo_", as.character(i))
#  file_name <- paste0(output_dir, raster_name)
#  if (file.exists(paste0(file_name, ".flt"))) {
#    unlink(paste0(file_name, ".flt")) 
#    unlink(paste0(file_name, ".hdr"))
#    unlink(paste0(file_name, ".prj"))
#    unlink(paste0(file_name, ".log"))    
#  }
 
#  file_name <- paste0(output_dir, "accum")
#  unlink(paste0(file_name, ".flt")) 
#  unlink(paste0(file_name, ".hdr"))
#  unlink(paste0(file_name, ".prj"))
#  unlink(paste0(file_name, ".log"))
  
#  for (j in 1:ncol(durations)) {
#    d <- durations[[j]]
#    raster_name <- paste0("pca_k1_", as.character(d))
#    file_name <- paste0(output_dir, raster_name)
#    unlink(paste0(file_name, ".flt")) 
#    unlink(paste0(file_name, ".hdr"))
#    unlink(paste0(file_name, ".prj"))
#    unlink(paste0(file_name, ".log"))
#  }
}
```

Save these.

```{r}
# save the sample points
ls_1996$class <- "pos"
ls_2007$class <- "pos"
ls_2011$class <- "pos"
nonls_1996$class <- "neg"
nonls_2007$class <- "neg"
nonls_2011$class <- "neg"
save(ls_1996, file = paste0(output_dir, "ls_1996_200.Rdata"))
save(ls_2007, file = paste0(output_dir, "ls_2007_200.Rdata"))
save(ls_2011, file = paste0(output_dir, "ls_2011_200.Rdata"))
save(nonls_1996, file = paste0(output_dir, "nonls_1996_200.Rdata"))
save(nonls_2007, file = paste0(output_dir, "nonls_2007_200.Rdata"))
save(nonls_2011, file = paste0(output_dir, "nonls_2011_200.Rdata"))
```

Take a look.

```{r}
str(ls_1996)
```
